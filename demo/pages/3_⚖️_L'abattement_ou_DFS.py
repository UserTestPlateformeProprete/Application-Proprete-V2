import streamlit as st
import pandas as pd

# Configuration de la page
st.set_page_config(
    page_title="La dÃ©duction forfaitaire spÃ©cifique",
    page_icon="ğŸ“–",
)
st.title("La dÃ©duction forfaitaire spÃ©cifique, suis-je gagnant ?")

with st.container(border=True):
    st.subheader("C'est quoi la dÃ©duction forfaitaire spÃ©cifique ?")
    st.write("""La dÃ©duction forfaitaire spÃ©cifique (DFS) ou abattement permet d'augmenter son salaire en diminuant le 
    montant prÃ©levÃ© pour les charges sociales. Mais attention car cela implique donc aussi de diminuer le 
    montant pris en compte pour la retraite. Ainsi il est important de peser l'importance de cette diminution de 
    retraite lorsque l'on vous propose d'utiliser la DFS.     
    En 2024 le montant maximal abattu est de 8% est diminue d'1% chaque annÃ©e. Ainsi, il ne sera plus possible de faire 
    de la dÃ©duction forfaitaire spÃ©cifique aprÃ¨s 2029.    
    Cet outil est lÃ  pour aider Ã  visualiser les gains sur son salaire mais aussi les pertes sur sa future retraite.
    """)

# Import des donnÃ©es
df = pd.read_csv("demo/data/fiche_coefficient_inflation_revalorisation_smic.csv", sep=",")
# st.write(df)

# Selection de la pÃ©riode
with st.container():
    debut, fin = st.select_slider("Choississez sur quelle pÃ©riode vous comptez utiliser la DFS",
                                  df["annÃ©e"], value=(2000, 2020),
                                  help="Glissez Ã  gauche pour sÃ©lectionner une annÃ©e de dÃ©part et Ã  droite pour"
                                       " l'annÃ©e de fin")

# Selection de la moyenne d'heure travaillÃ©e
with st.container():
    nbr_heures_mensuel = st.number_input("J'estime mon nombre d'heures mensuelles moyen travaillÃ©", value=100)

# Selection de son Ã©cart au SMIC
with st.container():
    ecart_smic = st.slider("Choississez votre Ã©cart moyen avec le smic sur cette pÃ©riode en pourcentage", 0, 100,
                           value=0, help="Vous pouvez vÃ©rifier ci-dessous que l'Ã©cart choisit correspond bien Ã  votre "
                                         "salaire sur la pÃ©riode")

    # Conversion des taux horaires en salaire mensuel
    salaires = df.loc[(df['annÃ©e'] >= debut) & (df['annÃ©e'] <= fin), ["annÃ©e", "smic", "abattement"]]
    salaires["salaires"] = salaires["smic"] * (1 + ecart_smic / 100) * nbr_heures_mensuel
    # st.write(salaires)

    # Affichage des salaires estimÃ©s
    st.write("En ", int(salaires.iloc[0]["annÃ©e"]), "le SMIC Ã©tait de ", int(salaires.iloc[0]["smic"] * nbr_heures_mensuel),
             "â‚¬ donc mon salaire brut mensuel Ã©tait d'environ ", int(salaires.iloc[0]["salaires"]), "â‚¬")
    if fin - debut > 2:
        st.write("En ", int(salaires.iloc[int(len(salaires) / 2)]["annÃ©e"]), "le SMIC Ã©tait de ",
                 int(salaires.iloc[int(len(salaires)/2)]["smic"] * nbr_heures_mensuel),
                 "â‚¬ donc mon salaire brut mensuel Ã©tait d'environ ",
                 int(salaires.iloc[int(len(salaires)/2)]["salaires"]), "â‚¬")
    if fin - debut > 0:
        st.write("En ", int(salaires.iloc[-1]["annÃ©e"]), "le SMIC Ã©tait de ",
                 int(salaires.iloc[-1]["smic"] * nbr_heures_mensuel), "â‚¬ donc mon salaire brut mensuel Ã©tait d'environ ",
                 int(salaires.iloc[-1]["salaires"]), "â‚¬")

# Nombre de trimestres effectuÃ©s
with st.container():
    a_trimestres_retraite = st.checkbox("Je n'aurais pas tous mes trimestres lorsque je partirai en retraite")
    if a_trimestres_retraite:
        st.subheader("Je renseigne mon nombre de trimestres effectuÃ©s lorsque je partirai en retraite")
        with st.expander("Vous n'avez pas cette information ?"):
            st.write(""" Dans ce cas, vous pouvez cocher que vous aurez tous vos trimestres lorsque vous partirez en 
                    retraite. La simulation sera moins prÃ©cise.""")
        trimestres_retraite = st.number_input("Entrer un nombre de trimestres", step=1, format="%i", min_value=1,
                                              max_value=172)
    else:
        trimestres_retraite = 172

st.divider()

# Calcul du brut
df = df.iloc[::-1]
df["inflation cumulÃ©e"] = (1 + (df["inflation"] / 100)).cumprod()
salaires["brut corrigÃ©"] = salaires["salaires"] * df.loc[
    (df['annÃ©e'] >= debut) & (df['annÃ©e'] <= fin), "inflation cumulÃ©e"]
salaires["brut annuel corrigÃ©"] = salaires["brut corrigÃ©"] * 12

# Calcul du gain abattement
abattement = df.loc[(df['annÃ©e'] >= debut) & (df['annÃ©e'] <= fin), "abattement"]
salaires['brut annuel corrigÃ© abattu'] = salaires["brut annuel corrigÃ©"].mul((1 - abattement / 100))
salaires['net annuel corrigÃ©'] = salaires['brut annuel corrigÃ©'] * 0.8
salaires['net annuel corrigÃ© abattu'] = (salaires["brut annuel corrigÃ© abattu"] * 0.8 +
                                         salaires["brut annuel corrigÃ©"].sub(salaires["brut annuel corrigÃ© abattu"]))
gain_abattement_total = salaires['net annuel corrigÃ© abattu'].sum() - salaires['net annuel corrigÃ©'].sum()

# Calcul retraite
retraites_annuelles_non_abattues = 0.5 * salaires["brut annuel corrigÃ©"].mean() * (trimestres_retraite / 172)
retraites_annuelles_abattues = 0.5 * salaires["brut annuel corrigÃ© abattu"].mean() * (trimestres_retraite / 172)
difference_retraite = retraites_annuelles_non_abattues - retraites_annuelles_abattues

# Calcul nombre d'annÃ©es Ã  la retraite nÃ©cessaire pour Ãªtre gagnant
if difference_retraite == 0:
    annees_de_retraites = 0
else :
    annees_de_retraites = gain_abattement_total / difference_retraite

# Affichage du nombre d'annÃ©es nÃ©cessaires
with st.container():
    st.subheader("Bilan : ")
    st.write("A partir des donnÃ©es de la simulation et si les annÃ©es de la pÃ©riode comptent pour votre retraite, nous "
             "estimons un gain de ", int(gain_abattement_total), "â‚¬ via l'abattement mais une perte de ",
             int(difference_retraite), "â‚¬/an sur votre retraite. Ainsi Ã  partir de plus de", int(annees_de_retraites),
             " annÃ©es aprÃ¨s la retraite, faire de l'abattement n'est pas avantageux pour vous.")
