import streamlit as st
import pandas as pd

# Configuration de la page
st.set_page_config(
    page_title="Ma classe",
    page_icon="üìñ",
)
st.title("V√©rifier sa classe")

# Import des donn√©es pre-requises pour les salaires
niveau_remuneration = pd.read_csv('App/data/fiche_classes_et_salaires.csv')
# st.write(classes)

# Import des donn√©es pre-requises pour classes
data_echelons = pd.read_csv('App/data/fiche_niveau_et_echelon.csv')
# st.write(data_echelons)

# Initialisation du r√©sultat dans le session state
if 'qualification' not in st.session_state:
    st.session_state['qualification'] = None

# Conteneur intro explicative
with st.container(border=True):
    st.write("""La qualification ou  classe repr√©sente la combinaison d'un niveau de technicit√©, d'autonomie et de 
    responsabilit√© au travail. Il est constitu√© d'un niveau et d'un √©chelon marquant la progression au sein de ce 
    niveau. Il est associ√© √† un niveau de r√©mun√©ration plus ou moins √©lev√©.    
    [Vers la convention : les grilles de classification](
    https://www.legifrance.gouv.fr/conv_coll/article/KALIARTI000047082593#KALIARTI000047082593)""",
             unsafe_allow_html=True)
    with st.expander("Voir les niveaux de r√©mun√©ration"):
        st.write("""Les niveaux de r√©mun√©ration suivant sont extrait directement de l'[avenant relatif aux grilles 
        tarifaires de la conventation propret√©](https://www.legifrance.gouv.fr/conv_coll/article/KALIARTI000046226073#KALIARTI000046226073)
        . Les grilles pr√©sentent un taux horaire A et B. Le taux horaire B concerne les personnes 
        ayant au moins trois mois d'anciennet√©, dont le contrat ne concerne pas une mission de remplacement et qui ont plusieurs r√¥les dans l'entreprise.
        Cela peut √™tre par exemple, s'occuper des missions classiques demand√© aux agents d'entretien, mais avoir en plus de celles-ci le gardiennage des cl√©s, la fermeture du portail...
        Pour plus de renseignements, vous pouvez consulter la FAQ pour trouver une liste de contact utile.""")
        st.write(niveau_remuneration)

st.write("""Nous vous proposons deux outils pour v√©rifier votre classe :     
        - Premi√®rement, cela peut-etre fait avec une auto-√©valuation des vos niveaux de comp√©tences et,    
        - en cas de difficult√©, le deuxi√®me outil vous demande simplement de choisir
        le m√©tier le plus proche du v√¥tre (cliquer sur 'En comparant mon m√©tier').""")

# S√©paration en deux tabs
tab1, tab2 = st.tabs(["Avec mon niveau de comp√©tence", "En comparant mon m√©tier"])

# Tab1 pour l'auto-√©valuation de ses comp√©tences
with (tab1):
    # Conteneur d'evaluation de son autonomie
    with (st.container()):
        st.subheader("J'√©value mon niveau d'autonomie")
        # Affichage des options
        niveau_autonomie = st.radio("Choississez le niveau d'autonomie qui vous correspond le plus : ",
                                    label_visibility="collapsed",
                                    options=data_echelons["Autonomie"].drop_duplicates(),
                                    index=None,
                                    captions=" ")
        # Affichage des niveaux de classe correspondants apr√®s selection d'une option
        if niveau_autonomie is not None:
            nca = data_echelons.loc[
                data_echelons["Autonomie"] == niveau_autonomie, ["Niveau", "√âchelon"]]
            for niveau in nca.get("Niveau").drop_duplicates():
                text = "Mon niveau d'autonomie est requis au niveau :blue[" + niveau + "] pour les √©chelons :\n"
                for echelon in nca.loc[nca["Niveau"] == niveau, "√âchelon"]:
                    text += "- :blue[" + echelon + "]\n"
                st.write(text)

    # Conteneur d'evaluation de sa technicit√©
    with st.container():
        st.subheader("J'√©value mon niveau de technicit√©")
        # Affichage des options
        niveau_technicite = st.radio("Choississez le niveau de technicit√© qui vous correspond le plus : ",
                                     label_visibility="collapsed",
                                     options=data_echelons["Technicit√©"].drop_duplicates(),
                                     index=None,
                                     captions=" ")
        # Affichage des niveaux de classe correspondants apr√®s selection d'une option
        if niveau_technicite is not None:
            nct = data_echelons.loc[
                data_echelons["Technicit√©"] == niveau_technicite, ["Niveau", "√âchelon"]]
            for niveau in nct.get("Niveau").drop_duplicates():
                text = "Mon niveau technique est requis au niveau :blue[" + niveau + "] pour le(s) √©chelon(s) :\n"
                for echelon in nct.loc[nct["Niveau"] == niveau, "√âchelon"]:
                    text += "- :blue[" + echelon + "]\n"
                st.write(text)

    # Conteneur d'evaluation de son niveau de responsabilit√©
    with st.container():
        st.subheader("J'√©value mon niveau de responsabilit√©")
        # Affichage des options
        niveau_responsabilite = st.radio("Choississez le niveau de responsabilit√© qui vous correspond le plus : ",
                                         label_visibility="collapsed",
                                         options=data_echelons["Responsabilit√©"].drop_duplicates(),
                                         index=None,
                                         captions=" ")
        # Affichage des niveaux de classe correspondants apr√®s selection d'une option
        if niveau_responsabilite is not None:
            ncr = data_echelons.loc[
                data_echelons["Responsabilit√©"] == niveau_responsabilite, ["Niveau", "√âchelon"]]
            for niveau in ncr.get("Niveau").drop_duplicates():
                text = "Mon niveau de responsabilit√© est requis au niveau :blue[" + niveau + "] pour le(s) √©chelon(s) :\n"
                for echelon in ncr.loc[ncr["Niveau"] == niveau, "√âchelon"]:
                    text += "- :blue[" + echelon + "]\n"
                st.write(text)

    st.divider()

    # Conteneur du bilan
    with (st.container()):
        st.header("Bilan")

        # Disclaimer
        with st.container(border=True):
            st.write("""
            Ce calculateur est fourni √† titre informatif seulement, il ne remplace pas les conseils professionnels, et 
            il est donc de la responsabilit√© de l'utilisateur en cas de d'irr√©gularit√© d√©tect√©e de rencontrer un professionnel
            pour qu'il puisse constater.
            """)

        classe_pretendu = None
        if niveau_responsabilite is not None and niveau_technicite is not None and niveau_autonomie is not None:
            index_classe_pretendu = min(ncr.index.max(), nct.index.max(), nca.index.max())
            classe_pretendu = data_echelons.loc[[index_classe_pretendu], ["Niveau", "√âchelon"]]
            st.write("La combinaison de mon niveau d'autonomie, de technicit√© dans mon travail et de responsabilit√© me "
                     "permet pr√©tendre √† la qualification :blue[", classe_pretendu.iloc[0, 0], "], √©chelon : :blue[",
                     classe_pretendu.iloc[0, 1], "].")
            st.write("Cela me permet de pr√©tendre √† un salaire brut de :blue[",
                     str(niveau_remuneration.loc[(niveau_remuneration["Niveau"] == classe_pretendu.iloc[0, 0]) &
                                                 (niveau_remuneration["Echelon"] == classe_pretendu.iloc[0, 1]),
                     "Taux Horaire B"].iloc[0]), "‚Ç¨/h].")
            st.session_state['qualification'] = classe_pretendu
        else:
            st.write("Choississez un niveau pour chacun des trois crit√®res"
                     " (Autonomie, Responsabilit√©, Technicit√©) pour avoir un r√©sultat global qui sera affich√© ici.")

# Tab2 pour la comparaison avec d'autres m√©tiers
with (tab2):
    st.write("S√©lectionnez le m√©tier qui s'approche le plus du votre : ")
    metier = st.radio("Choississez le niveau d'autonomie qui vous correspond le plus : ",
                      options=data_echelons["Liste non exhaustive d'emplois rep√®res"].drop_duplicates(),
                      captions=" ",
                      label_visibility="collapsed")
    # Conteneur du bilan
    st.divider()
    with (st.container()):
        st.header("Bilan")

        # Disclaimer
        with st.container(border=True):
            st.write("""
            Ce calculateur est fourni √† titre informatif seulement, il ne remplace pas les conseils professionnels, et 
            il est donc de la responsabilit√© de l'utilisateur en cas de d'irr√©gularit√© d√©tect√©e de rencontrer un professionnel
            pour qu'il puisse constater.
            """)

        if metier is None:
            st.write("Veuillez d'abord s√©lectionner une des options ci-dessus.")
        else:
            niveau_pretendu = data_echelons.loc[data_echelons["Liste non exhaustive d'emplois rep√®res"] == metier,
                                                ["Niveau", "√âchelon"]].drop_duplicates()
            st.session_state['qualification'] = niveau_pretendu
            st.write("Les m√©tiers s√©lectionn√©s permettent d'acc√©der au niveau : :blue[", niveau_pretendu.Niveau.iloc[0],
                     "] √† l'√©chelon : :blue[", niveau_pretendu.√âchelon.iloc[0], "].")

st.write("Ma classe ne correspond pas :")
if st.button(label="Vers la FAQ"):
    st.switch_page("pages/4_‚ùì_FAQ.py")

st.write("Je passe au calcul de mon salaire brut :")
if st.button(label="Le calculateur de salaire"):
    st.switch_page("pages/2_üí∞_Mon_Salaire_Brut.py")
